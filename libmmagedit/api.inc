// auto-generated by apigen.sh
// BEGIN API ------------------------------------------------------------------

// All returned strings are valid references until the next library call is made.

// This must be called before any other function
// parameters:
//   path_to_mmagedit: path to mmagedit.py
$(error_code_t, mmagedit_init, const char*)

// this should be called to shut down the library
$(error_code_t, mmagedit_end, )

// if an error occurred previously, this function will return 1.
// Otherwise, this function returns 0.
// mmagedit_get_error() can be used to determine the description of the error.
// mmagedit_clear_error() can be used to clear this error.
$(int, mmagedit_get_error_occurred, )

// if an error has occurred, this function clears it.
$(void, mmagedit_clear_error, )

// if an error occured previously, use this to get its error description.
// if no errors have occurred, this returns an empty string.
// the error is cleared after calling this function.
$(const char*, mmagedit_get_error, )

// returns e.g. "MMagedit v1.21: 12 March 2021"
// this invokes a python function, which can be used to verify that the
// python context is working correctly.
// returns an empty string if an error has occurred.
$(const char*, mmagedit_get_name_version_date, )

// retrieves format int mmagedit.
// This int stored in the hack file, which can be used to check the version mmagedit
// that the hack was created in.
// returns 0 if an error occurred.
$(uint64_t, mmagedit_get_version_int, )

// This retrieves the minimum format version that libmmagedit
// requires mmagedit to have.
// this can be run before mmagedit_init.
// (guaranteed no error.)
$(uint64_t, mmagedit_get_minimum_version_int, )

// load a base rom.
$(error_code_t, mmagedit_load_rom, const char*)

// load a hack file (optional)
$(error_code_t, mmagedit_load_hack, const char*)

// write a rom.
$(error_code_t, mmagedit_write_rom, const char*)

// write a hack file
// if "all" is false, certain details will be withheld from the hack file if they
// have not been changed from the base ROM, including CHR data.
$(error_code_t, mmagedit_write_hack, const char*, bool_t)

// returns a json string containing all the data in the current state of the hack
// if an error occurs, the return value is the string containing "null"
// however, "null" is also a valid return value on its own  -- please use mmagedit_get_error_occured() to determine if a true error occurred.
$(json_t, mmagedit_get_state, )

// as above, but selected using a jsonpath.
// jsonpath may be of the format ".foo.bar[0].quz", etc.
//
// example jsonpaths:
//   ""                                 : returns full state
//   ".chr[0][4:23]"                    : returns only the CHR image data in page 0 (backgrounds) with indices in the range [4, 23)
//   ".worlds[0].max-symmetry-idx"      : returns max symmetry idx for world 0
//   ".levels[5].\".name\""             : returns ".name" field for level 5
$(json_t, mmagedit_get_state_select, const char*)

// all the json data in this string will be applied to the current state of the hack.
// any data which is left out of this json object will not modify the state of the hack.
$(error_code_t, mmagedit_apply_state, json_t)

// get mirrored med-tile idx for given med-tile in the given world.
// returns -1 if an error occurred.
$(medtile_idx_t, mmagedit_get_mirror_tile_idx, world_idx_t, medtile_idx_t)

// ---------------------------------------------------------------------
// logging

// set log level (default is 0 -- log nothing)
// (this can be set before init)





$(void, mmagedit_set_log_level, int)

// pass 0 to disable logging to stdout
$(void, mmagedit_set_log_stdout, int)

// sets the number of log lines to keep.
// default is 100.
// 0 means do not delete logs.
$(void, mmagedit_set_log_count_max, int)

// get current number of logs in buffer
$(int, mmagedit_get_log_count, int)

// retrieves the nth most recent log line.
// guaranteed no error.
// if n is out of bounds, an empty string is returned.
$(const char*, mmagedit_get_log_entry, int)

// retrieves the nth most recent log line's log-level.
// returns -1 if n is out of bounds.
$(int, mmagedit_get_log_entry_level, int)

// run the string of python code directly.
// returns nonzero on failure.
// no output is returned, but you can inspect local or global variables with
// the next functions in this header file.
// start is a python start token refer to python C api documentation,
// or pass in 0 for a default.
// the variable mmdata contains the MMData object for this library.
$(int, mmagedit_run_pystring, const char*, int)

// access local and global variables as int string.
// pass 1 to read local and 0 to read global.
// use mmagedit_get_error_occurred() to check for errors.
$(int, mmagedit_get_python_int, int, const char*)

$(const char*, mmagedit_get_python_str, int, const char*)

// ---------------------------------------------------------------------
// "hello world" functions which can be used to verify library integrity

// store and retrieve an int
$(void, mmagedit_hw_set_int, int)
$(int, mmagedit_hw_get_int, )

// this should return the string "Hello, World!" or whatever was set previously
$(const char*, mmagedit_hw_get_str, )
$(void, mmagedit_hw_set_str, const char*)

// END API -------------------------------------------------------------